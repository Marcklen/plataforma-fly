version: "3.9"

services:

  config-server:
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - "8088:8088"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria

  eureka-server:
    build:
      context: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    restart: always
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria

  gateway-api:
    build:
      context: ./gateway-api
    container_name: gateway-api
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria
      - cache
      - kafka-net
      - observabilidade

  usuario-api:
    build:
      context: ./usuario-api
    container_name: usuario-api
    ports:
      - "8081:8081"
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria

  auth-api:
    build:
      context: ./auth-api
    container_name: auth-api
    ports:
      - "8082:8082"
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria

  email-producer-api:
    build:
      context: ./email-producer-api
    container_name: email-producer-api
    ports:
      - "8083:8083"
    restart: always
    depends_on:
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria
      - kafka-net

  email-consumer-api:
    build:
      context: ./email-consumer-api
    container_name: email-consumer-api
    ports:
      - "8084:8084"
    restart: always
    depends_on:
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mensageria
      - kafka-net

  redis:
    image: redis:7.2
    container_name: redis-dev
    ports:
      - "6379:6379"
    restart: always
    networks:
      - cache

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always
    networks:
      - mensageria

  zookeeper:
    image: bitnami/zookeeper:3.8.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    restart: always
    networks:
      - kafka-net

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    restart: always
    networks:
      - kafka-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always
    networks:
      - observabilidade

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - observabilidade

volumes:
  grafana-storage:

networks:
  mensageria:
    driver: bridge
  kafka-net:
    driver: bridge
  cache:
    driver: bridge
  observabilidade:
    driver: bridge